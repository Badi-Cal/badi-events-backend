package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"

	"golang.org/x/net/context"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/calendar/v3"
)

// Retrieve a token, saves the token, then returns the generated client.
func getClient(w http.ResponseWriter, r *http.Request, config *oauth2.Config) *http.Client {
	// The file token.json stores the user's access and refresh tokens, and is
	// created automatically when the authorization flow completes for the first
	// time.
	tokFile := "token.json"
	tok, err := tokenFromFile(tokFile)
	if err != nil {
		tok = getTokenFromWeb(w, r, config)
		saveToken(tokFile, tok)
	}
	return config.Client(context.Background(), tok)
}

// Request a token from the web, then returns the retrieved token.
func getTokenFromWeb(w http.ResponseWriter, r *http.Request, config *oauth2.Config) *oauth2.Token {
	//uthURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	// this replaces above  further defining permissions
    //authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline, oauth2.ApprovalForce, calendar.CalendarScope)
	//the following commented code is replaced by below 
	//fmt.Printf("Go to the following link in your browser then type the "+
		//"authorization code: \n%v\n", authURL)

	//var authCode string
	//if _, err := fmt.Scan(&authCode); err != nil {
		//log.Fatalf("Unable to read authorization code: %v", err)
	//}

	//tok, err := config.Exchange(context.TODO(), authCode)
	//if err != nil {
		//log.Fatalf("Unable to retrieve token from web: %v", err)
	//}
	//return tok

	// Generate a URL for the user to visit to grant permissions
	url := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline) 

	// Redirect the user to the authorization URL
	http.Redirect(w, r, url, http.StatusFound)

	// Wait for the user to grant permissions and be redirected back to our application
	code := r.URL.Query().Get("code")
    //if code == "" {
        //return nil, errors.New("authorization code not found")
    //}

	// Exchange the authorization code for an access token
	tok, err := config.Exchange(context.Background(), code)
	if err != nil {
		log.Fatalf("Unable to retrieve token from web: %v", err)
	}
	return tok
}

// Retrieves a token from a local file.
func tokenFromFile(file string) (*oauth2.Token, error) {
	f, err := os.Open(file)
	if err != nil {
		return nil, err
	}
	defer f.Close()
	tok := &oauth2.Token{}
	err = json.NewDecoder(f).Decode(tok)
	return tok, err
}

// Saves a token to a file path.
func saveToken(path string, token *oauth2.Token) {
	fmt.Printf("Saving credential file to: %s\n", path)
	f, err := os.OpenFile(path, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		log.Fatalf("Unable to cache oauth token: %v", err)
	}
	defer f.Close()
	json.NewEncoder(f).Encode(token)
}

// polls Google Calendar and writes the response to http
func jsonHandler(w http.ResponseWriter, r *http.Request) {
	b, err := ioutil.ReadFile("credentials.json")
	if err != nil {
		log.Fatalf("Unable to read client secret file: %v", err)
	}

	// If modifying these scopes, delete your previously saved token.json.
	config, err := google.ConfigFromJSON(b, calendar.CalendarScope)
	if err != nil {
		log.Fatalf("Unable to parse client secret file to config: %v", err)
	}
    // Add a list of scopes to the config. added 16 mulk 179
    config.Scopes = []string{calendar.CalendarScope}

	client := getClient(w, r, config)

	srv, err := calendar.New(client)
	if err != nil {
		log.Fatalf("Unable to retrieve Calendar client: %v", err)
	}
    // TimeMax(month)
    // SingleEvents(true).TimeMin(t).MaxResults(30).OrderBy("startTime").Do()
	t := time.Now().Format(time.RFC3339)
	// fnt := time.Now()
	//fortnight := time.Now().AddDate(0, 0, 14).Format(time.RFC3339)
	// month := time.Now().AddDate(0, 0, 30).Format(time.RFC3339)
	events, err := srv.Events.List("primary").ShowDeleted(false).
		SingleEvents(true).TimeMin(t).MaxResults(30).OrderBy("startTime").Do()
	if err != nil {
		log.Fatalf("Unable to retrieve next ten of the user's events: %v", err)
	}
    json.NewEncoder(w).Encode(events)
}

// type events map[string]string

func main() {
    http.HandleFunc("/", jsonHandler)
    log.Fatal(http.ListenAndServe(":8080", nil))

}

